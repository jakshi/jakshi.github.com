<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: chef | DevOp's Blog]]></title>
  <link href="http://jakshi.github.com/blog/categories/chef/atom.xml" rel="self"/>
  <link href="http://jakshi.github.com/"/>
  <updated>2015-06-11T14:21:33+08:00</updated>
  <id>http://jakshi.github.com/</id>
  <author>
    <name><![CDATA[jakshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Chef shortcuts]]></title>
    <link href="http://jakshi.github.com/blog/2014/11/21/chef-shortcuts/"/>
    <updated>2014-11-21T13:16:00+08:00</updated>
    <id>http://jakshi.github.com/blog/2014/11/21/chef-shortcuts</id>
    <content type="html"><![CDATA[<h1>Add a recipe to the end of run list on certain environment</h1>

<p>Test run, not actually add a recipe:</p>

<p><code>
knife exec -E 'nodes.transform ("chef_environment:beta") {|n| puts n.run_list &lt;&lt; "recipe[logentries_ng]" }'
</code></p>

<p>Add a recipe for real:</p>

<p><code>
knife exec -E 'nodes.transform ("chef_environment:beta") {|n| puts n.run_list &lt;&lt; "recipe[logentries_ng]"; n.save }'
</code></p>

<!-- more -->


<h1>Add a recipe to the beginning of run list on certain environment</h1>

<p>Test run, not actually add a recipe:</p>

<p><code>
knife exec -E 'nodes.transform ("chef_environment:qa01") {|n| old_rl = n.run_list.to_a; puts n.run_list(["recipe[datadog::dd-handler]"] + old_rl) }'
</code></p>

<p>Add a recipe for real:</p>

<p><code>
knife exec -E 'nodes.transform ("chef_environment:qa01") {|n| old_rl = n.run_list.to_a; puts n.run_list(["recipe[datadog::dd-handler]"] + old_rl); n.save }'
</code></p>

<h1>Insert a recipe in the second position of run list on certain environment</h1>

<p>Test run, not actually add a recipe:</p>

<p><code>
knife exec -E 'nodes.transform ("chef_environment:qa04") {|n| old_rl = n.run_list.to_a; puts n.run_list(old_rl[0..0] + ["recipe[datadog::dd-handler]"] + old_rl[1..-1]) }'
</code></p>

<p>Add a recipe for real:</p>

<p><code>
knife exec -E 'nodes.transform ("chef_environment:qa04") {|n| old_rl = n.run_list.to_a; puts n.run_list(old_rl[0..0] + ["recipe[datadog::dd-handler]"] + old_rl[1..-1]); n.save }'
</code></p>

<h1>Remove a recipe from run list on certain environment</h1>

<p>Test run, not actually remove a recipe:</p>

<p><code>
knife exec -E 'nodes.transform ("chef_environment:qa02") {|n| puts n.run_list.remove ("recipe[logentries_ng]") }'
</code></p>

<p>Remove a recipe for real:</p>

<p><code>
knife exec -E 'nodes.transform ("chef_environment:qa02") {|n| puts n.run_list.remove ("recipe[logentries_ng]"); n.save }'
</code></p>

<h1>Execute chef-client on all nodes in specific environment</h1>

<p><code>
knife ssh 'chef_environment:qa02' 'sudo chef-client'
</code></p>

<h1>Search for nodes in specific environment and having specific recipe</h1>

<p>And show only node names (-i option)</p>

<p><code>
knife search node "chef_environment:production AND recipes:web_server" -i
</code></p>

<h1>Get list of all uniq non-system usernames that exists in specific environment</h1>

<p><code>
knife exec -E 'users = []; nodes.find("chef_environment:production") {|n| n[:etc][:passwd].select { |user, options| options[:uid] &gt;= 1000 }.each { |user, options| users &lt;&lt; user} }; users.uniq.each { |user| puts user } '
</code></p>

<h1>More shotcuts</h1>

<p>Do you want even more shortcuts? Read nice article: <a href="http://dougireton.com/blog/2013/02/03/knife-tricks/">Knife Tricks</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Accessing chef attributes in serverspec tests]]></title>
    <link href="http://jakshi.github.com/blog/2014/05/12/accessing-chef-attributes-in-serverspec-tests/"/>
    <updated>2014-05-12T01:45:00+08:00</updated>
    <id>http://jakshi.github.com/blog/2014/05/12/accessing-chef-attributes-in-serverspec-tests</id>
    <content type="html"><![CDATA[<p>I presume that you are familiar with:</p>

<ul>
<li>Chef</li>
<li>test-kitchen</li>
<li>serverspec</li>
</ul>


<p>When you write serverspec integration tests, it would be great to have access to chef attributes of cookbook that you're testing.
There's a fast and simple way to do this.</p>

<!-- more -->


<h1>Introduction</h1>

<p><code>
cat attributes/default.rb
</code></p>

<p><code>
override['backup']['dependencies'] = [['fog'],['aws-s3']]
</code></p>

<p>Let's say we want this attribute in your serverspec tests.</p>

<p>How can we do that?</p>

<ul>
<li>Dump chef attributes to JSON file with helper cookbook</li>
<li>Load this file from serverspec tests</li>
</ul>


<h1>Dump chef attributes</h1>

<h2>Create fixture cookbook</h2>

<p><code>
emacs test/fixtures/cookbooks/test-helper/metadata.rb
</code></p>

<p>```
name             'test-helper'
maintainer       'John Smith'
maintainer_email 'john@example.com'
license          'Apache 2.0'
description      'Dumps chef node data to json file'
long_description IO.read(File.join(File.dirname(<strong>FILE</strong>), 'README.md'))
version          '0.0.1'</p>

<p>recipe 'default', 'Dumps chef node data to json file'</p>

<p>%w{ ubuntu debian }.each do |os|
  supports os
end
```</p>

<p><code>
emacs test/fixtures/cookbooks/test-helper/recipes/default.rb
</code></p>

<p>```
chef_gem 'activesupport'</p>

<p>require 'pathname'
require 'active_support/core_ext/hash/deep_merge'</p>

<p>directory '/tmp/serverspec' do
  recursive true
end</p>

<p>file '/tmp/serverspec/node.json' do
  owner "root"
  mode "0400"
end</p>

<p>log "Dumping attributes to '/tmp/serverspec/node.json."</p>

<p>ruby_block "dump_node_attributes" do
  block do</p>

<pre><code>require 'json'

attrs = {}

attrs = attrs.deep_merge(node.default_attrs) unless node.default_attrs.empty?
attrs = attrs.deep_merge(node.normal_attrs) unless node.normal_attrs.empty?
attrs = attrs.deep_merge(node.override_attrs) unless node.override_attrs.empty?

recipe_json = "{ \"run_list\": \[ "
recipe_json &lt;&lt; node.run_list.expand(node.chef_environment).recipes.map! { |k| "\"#{k}\"" }.join(",")
recipe_json &lt;&lt; " \] }"
attrs = attrs.deep_merge(JSON.parse(recipe_json))

File.open('/tmp/serverspec/node.json', 'w') { |file| file.write(JSON.pretty_generate(attrs)) }
</code></pre>

<p>  end
end
```</p>

<p><code>
echo "This a cookbook for dumping chef node attributes to specific location to json formated file." &gt; test/fixtures/cookbooks/test-helper/README.md
</code></p>

<h2>Add it to .kitchen.yml</h2>

<p><code>
emacs .kitchen.yml
</code></p>

<h2>```</h2>

<p>driver:
  name: digitalocean
  region: amsterdam 2
  flavor: 512MB</p>

<p>provisioner:
  name: chef_solo</p>

<p>platforms:
  - name: ubuntu-12.04</p>

<p>suites:
  - name: default</p>

<pre><code>run_list:
  - recipe[my_cookbook::default]
  - recipe[test-helper::default]
attributes:
</code></pre>

<p>```</p>

<h2>Add cookbook helper to Berksfile</h2>

<p><code>
emacs Berksfile
</code></p>

<p>```
source "http://api.berkshelf.com"</p>

<p>metadata</p>

<p>group :integration do
  cookbook 'test-helper', path: 'test/fixtures/cookbooks/test-helper'
end
```</p>

<p><code>
berks update
</code></p>

<h1>Load chef attributes</h1>

<p><code>
emacs test/integration/default/serverspec/spec_helper.rb
</code></p>

<p>```
require 'serverspec'
require 'pathname'
require 'net/http'
require 'net/smtp'
require 'json'</p>

<p>set :backend, :exec</p>

<p>$node = ::JSON.parse(File.read('/tmp/serverspec/node.json'))
```</p>

<h1>Use chef attributes in tests</h1>

<p>```
require 'spec_helper'</p>

<p>describe 'my_cookbook' do</p>

<p>  context 'dependencies recipe. It' do</p>

<pre><code>$node['backup']['dependencies'].each do |bgem|
  it "installs backup gem dependency: #{bgem[0]}" do
    expect(package bgem[0]).to be_installed.by('gem')
  end
end
</code></pre>

<p>  end</p>

<p>end
```</p>

<h1>Conclusion</h1>

<p>if you execute:</p>

<p><code>
kitchen verify
</code></p>

<p>you should see:
```
my_cookbook
  dependencies recipe. It</p>

<pre><code>installs backup gem dependency: fog       
installs backup gem dependency: aws-s3       
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chef cookbook templating with cookiecutter]]></title>
    <link href="http://jakshi.github.com/blog/2014/05/03/chef-cookbook-templating-with-cookiecutter/"/>
    <updated>2014-05-03T01:21:00+08:00</updated>
    <id>http://jakshi.github.com/blog/2014/05/03/chef-cookbook-templating-with-cookiecutter</id>
    <content type="html"><![CDATA[<p>One of the challenges in chef cookbook development - create a comprehensive cookbook template.</p>

<p>Good cookbook template might:</p>

<ul>
<li>standartize your cookbooks</li>
<li>fill them with convenient predefinitions</li>
<li>save your time.</li>
</ul>


<p>If you are not python averse, you could find that <a href="https://github.com/audreyr/cookiecutter">cookiecutter</a> pretty useful tool for creating your cookbooks templates. This article describes my experience in creating chef cookbook template with <a href="https://github.com/audreyr/cookiecutter">cookiecutter</a>.</p>

<!-- more -->


<h1>Cookiecutter in nutshell</h1>

<ul>
<li><a href="https://github.com/audreyr/cookiecutter">cookiecutter</a> is a python based software.</li>
<li>it uses <a href="http://jinja.pocoo.org/">Jinja</a> templating engine</li>
<li>To install cookiecutter read: <a href="http://cookiecutter.readthedocs.org/en/latest/installation.html">Installing Cookiecutter</a>.</li>
<li>On my Ubuntu 12.04 workstation I used <code>pip cookiecutter</code> to install it.</li>
<li>variables defined in <code>cookiecutter.json</code> file in the root of template directories hierarchy</li>
<li>these variables might be used inside files by specifing <div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{{cookiecutter.variable_name}}</span></code></pre></td></tr></table></div></figure></notextile></div></li>
<li>these variables might be used as a file or directory names, if you call file or directory like: <div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{{cookiecutter.variable_name}}</span></code></pre></td></tr></table></div></figure></notextile></div></li>
<li>cookiecutter supports pre and post generate hooks.</li>
<li>hooks might be shell or python scripts, have names <code>pre_gen_project.[sh,py]</code> or <code>post_gen_project.[sh,py]</code>, and should be in hooks dir.</li>
</ul>


<h1>Chef cookbook templating with cookiecutter</h1>

<h2>Create a directory for template</h2>

<p><code>
mkdir chef-cookbook-template
cd chef-cookbook-template
</code></p>

<h2>Create a file with template variables</h2>

<p>```
emacs cookiecutter.json
{</p>

<pre><code> "author": "John Smith",
 "email": "cookbooks@example.com",
 "cookbook_name": "",
 "company_name": "Example Ltd",
 "release_date": "2014-04-17",
 "year": "2014",
 "version": "0.0.1"
</code></pre>

<p>}
```</p>

<p>Value that specified in this file, will be suggested as a default one.</p>

<p>As you see there's no value for "cookbook_name". So there will be no default value, you need to specify it every time you create new cookbook from this template.</p>

<h2>Create a templated directory for cookbook</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir "chef-{{cookiecutter.cookbook_name}}"</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Create files for your cookbook.</h2>

<p>On this stage you should fill your cookbooks with files that you need in your cookbook template. Use variables when it's suitable.</p>

<p>In my cookbook template I added variables to files:</p>

<ul>
<li>attributes/default.rb</li>
<li>README.md</li>
<li>spec/default_spec.rb</li>
<li>metadata.rb</li>
<li>{{cookiecutter.cookbook_name}}.packer</li>
<li>LICENSE</li>
<li>Vagrantfile</li>
<li>.kitchen.yml</li>
<li>test/integration/default/serverspec/localhost/default_spec.rb</li>
<li>recipes/default.rb</li>
</ul>


<h2>Post-create hooks</h2>

<p>It could be anything you want. For example I initialize my cookbook template with git.</p>

<p>In root directory of cookiecutter template add hooks directory.</p>

<p><code>
mkdir hooks
cd hooks
emacs post_gen_project.sh
</code></p>

<p>```</p>

<h1>!/bin/bash</h1>

<p>command -v git >/dev/null 2>&amp;1 &amp;&amp; git init || { echo >&amp;2 "git init is failed. Probably git is not installed. Install git if it's not installed."; exit 1; }
```</p>

<h1>Usage</h1>

<p>I presume that:</p>

<ul>
<li>you finished your template</li>
<li>and uploaded it to github</li>
</ul>


<h2>Use template from github git repository</h2>

<p><code>
cookiecutter https://github.com/example/my-chef-cookbook-template.git
</code></p>

<h2>Use it again.</h2>

<ul>
<li>After first usage template will be copied to ~/.cookiecutter directory.</li>
<li>So to use it again you need to specify template name only:</li>
</ul>


<p><code>
cookiecutter my-chef-cookbook-template
</code></p>

<h2>Update template</h2>

<p><code>
cd ~/.cookiecutter/my-chef-cookbook-template
git pull
</code></p>

<h2>Use template from local dir</h2>

<ul>
<li>You can just store template in current directory and use it.</li>
<li>Let's presume that you have template in <code>my-chef-cookbook-template</code> dir.</li>
<li>Then to use template you just need to execute command:</li>
</ul>


<p><code>
cookiecutter my-chef-cookbook-template
</code></p>

<h1>Tips and tricks</h1>

<ul>
<li>If you want to include in resulting file {{ or/and }}, you can specify them like <div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{{'{{'}}</span></code></pre></td></tr></table></div></figure></notextile></div> or/and <div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{{'}}'}}</span></code></pre></td></tr></table></div></figure></notextile></div></li>
</ul>


<h1>References</h1>

<ul>
<li><a href="https://github.com/audreyr/cookiecutter">Cookiecutter</a></li>
<li><a href="http://cookiecutter.readthedocs.org/en/latest/installation.html">Installing Cookiecutter</a></li>
<li><a href="http://jinja.pocoo.org/">Jinja</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backup gem and Chef]]></title>
    <link href="http://jakshi.github.com/blog/2014/04/24/backup-gem-and-chef/"/>
    <updated>2014-04-24T12:48:00+08:00</updated>
    <id>http://jakshi.github.com/blog/2014/04/24/backup-gem-and-chef</id>
    <content type="html"><![CDATA[<h1>Intro</h1>

<ul>
<li>There's a nice tool for doing fast and easy backup to AWS S3: <a href="http://meskyanichi.github.io/backup/">backup gem</a></li>
<li>There should be done a lot of steps for setup a backup though.</li>
<li>So it could be automated with chef.</li>
<li>In this article I'll write log of creation backup gem's cookbook.</li>
<li>Essentially this cookbook will install backup gem, that will backup /var/www folder to AWS S3 every day in 01:00. It will store last 14 backups.</li>
</ul>


<!-- more -->


<h1>Chef application cookbook for backup gem</h1>

<h2>Create a cookbook</h2>

<p>   mkdir example-backup
   cd example-backup</p>

<h2>Create metadata</h2>

<pre><code>emacs metadata.rb
</code></pre>

<p>```
name             'example-backup'
maintainer       'John Smith'
maintainer_email 'john@example.com'
license          'Apache 2.0'
description      'Installs/Configures example-backup'
long_description IO.read(File.join(File.dirname(<strong>FILE</strong>), 'README.md'))
version          '0.0.1'</p>

<p>%w{ubuntu}.each do |os|
  supports os
end</p>

<p>depends 'backup', '~> 0.4.0'
depends 'build-essential'
depends 'cron', '= 1.3.8'
```</p>

<ul>
<li>We will use 'backup' gem for setupping backup.</li>
<li>build-essential is necessary for installing gem's native extensions</li>
<li>cron is restricted to 1.3.8 version, because last version of cron (1.3.10) was broken on the moment of writing this article.</li>
<li>This example is for ubuntu 12.04 LTS only</li>
</ul>


<h2>Attributes</h2>

<pre><code>emacs attributes/default.rb
</code></pre>

<p><code>
default['example']['backup']['s3-bucket'] = 'example.com.backup'
override['build-essential']['compile_time'] = true
override['backup']['dependencies'] = [['fog'],['aws-s3']]
override['backup']['version'] = '4.0.1'
override['backup']['path'] = '/opt/backup'
</code></p>

<h2>Templates</h2>

<pre><code>emacs templates/default/config.rb.erb
</code></pre>

<p>```</p>

<h1>encoding: utf-8</h1>

<h1>#</h1>

<h1>Backup v4.x Configuration</h1>

<p>#</p>

<h1>Documentation: http://meskyanichi.github.io/backup</h1>

<h1>Issue Tracker: https://github.com/meskyanichi/backup/issues</h1>

<p>root_path '&lt;%= @root_path %>'
tmp_path '&lt;%= @tmp_path %>'
data_path '&lt;%= @data_path %>'
```</p>

<h2>Recipes</h2>

<h3>default</h3>

<pre><code>emacs recipes/default.rb
</code></pre>

<p><code>
include_recipe 'example-backup::dependencies'
include_recipe 'example-backup::backup'
</code></p>

<h3>dependencies</h3>

<p>This recipe is to install dependenices that neccessary for backup gem to functioning.</p>

<pre><code>emacs recipes/dependencies.rb
</code></pre>

<p>```
include_recipe 'build-essential'</p>

<p>%w{ruby1.9.1-full libopenssl-ruby1.9.1 libssl-dev zlib1g-dev}.each do |pkg|
  package(pkg).run_action(:install)
end</p>

<h1>Make ruby19 default ruby interpreter</h1>

<h1>Ruby 1.8.x on Ubuntu 12.04 LTS have priority 50</h1>

<h1>Let's setup priority 400 for ruby 1.9.x</h1>

<p>bash 'ruby19_by_default' do
  cwd '/tmp'
  code &lt;&lt;-EOH
  update-alternatives --install /usr/bin/ruby ruby /usr/bin/ruby1.9.1 400 --slave /usr/share/man/man1/ruby.1.gz ruby.1.gz /usr/share/man/man1/ruby1.9.1.1.gz --slave /usr/bin/erb erb /usr/bin/erb1.9.1 --slave /usr/share/man/man1/erb.1.gz erb.1.gz /usr/share/man/man1/erb1.9.1.1.gz --slave /usr/bin/irb irb /usr/bin/irb1.9.1 --slave /usr/share/man/man1/irb.1.gz irb.1.gz /usr/share/man/man1/irb1.9.1.1.gz --slave /usr/bin/rdoc rdoc /usr/bin/rdoc1.9.1 --slave /usr/share/man/man1/rdoc.1.gz rdoc.1.gz /usr/share/man/man1/rdoc1.9.1.1.gz --slave /usr/bin/ri ri /usr/bin/ri1.9.1 --slave /usr/share/man/man1/ri.1.gz ri.1.gz /usr/share/man/man1/ri1.9.1.1.gz --slave /usr/bin/testrb testrb /usr/bin/testrb1.9.1 --slave /usr/share/man/man1/testrb.1.gz testrb.1.gz /usr/share/man/man1/testrb1.9.1.1.gz
EOH
end</p>

<p>chef_gem "chef-rewind"
require 'chef/rewind'</p>

<p>include_recipe 'backup'</p>

<p>%w{keys .data logs}.each do |dir|
  directory "#{node['backup']['path']}/#{dir}" do</p>

<pre><code>action :create
recursive true
</code></pre>

<p>  end
end</p>

<p>rewind :template => "Backup config file" do
  source 'config.rb.erb'
  cookbook_name 'example-backup'
  variables({</p>

<pre><code>:root_path =&gt; node['backup']['path'],
:tmp_path =&gt; '/tmp',
:data_path =&gt; "#{node['backup']['path']}/.data"
</code></pre>

<p>  })
end
```</p>

<ul>
<li>Recipe installs ruby 1.9 and make it default.</li>
<li>I include backup::default recipe, that will install backup, fog and aws-s3 gems, create backup config and some necessary dirs.</li>
<li>Little trick. Last version of backup recipe doesn't support backup gem 4.x version.</li>
<li>Difference is in the config file template.</li>
<li>So I substitute backup's cookbook config file template (for 3.x version of backup gem) with my own config template for 4.x version of backup gem.</li>
<li>I use chef-rewind gem for that</li>
</ul>


<h3>backup</h3>

<p>Action part of recipe. It will configure backup.</p>

<pre><code>emacs recipes/backup.rb
</code></pre>

<p>```
aws = data_bag_item('aws', 'backup')</p>

<p>backup_model :www do
  description "backup of /var/www folder"
  definition &lt;<-EOS
before do
  require 'aws/s3'
  AWS::S3::Base.establish_connection!(:access_key_id => '#{aws['aws_access_key_id']}', :secret_access_key => '#{aws['aws_secret_access_key']}')
  AWS::S3::Bucket.create('#{node['example']['backup']['s3-bucket']}')
  AWS::S3::Base.disconnect!
end</p>

<p>split_into_chunks_of 50</p>

<p>store_with S3 do |s3|
  s3.access_key_id = '#{aws['aws_access_key_id']}'
  s3.secret_access_key = '#{aws['aws_secret_access_key']}'
  s3.region = 'us-east-1'
  s3.bucket = '#{node['example']['backup']['s3-bucket']}'
  s3.path = '/'
  s3.keep = 14
  s3.fog_options = {</p>

<pre><code>:path_style =&gt; true
</code></pre>

<p>  }
end</p>

<h1>#</h1>

<h1>Gzip [Compressor]</h1>

<p>#
compress_with Gzip</p>

<p>archive :www do |archive|
  archive.add '/var/www/'
  archive.tar_options '-p'
end</p>

<p>EOS
  schedule({</p>

<pre><code>:minute =&gt; '0',
:hour   =&gt; '1',
</code></pre>

<p>  })
  cron_options({</p>

<pre><code>:path =&gt; '/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin'
</code></pre>

<p>  })
end
```</p>

<ul>
<li>I get aws credentials from aws data bag.</li>
<li>They could be loaded from other source, like attributes, anything you like.</li>
<li>In backup model I create a before hook that will create amazon bucket for backups in case it doesn't exist.</li>
<li>Then backup resource just describe backupping /var/www to Amazon S3 bucket, keep 14 backup, start every day on 01:00 AM.</li>
</ul>


<h2>Usage</h2>

<ul>
<li>I presume that you use chef-server and you already have some chef repository, like <code>example-chef-repo</code>.</li>
<li>Fill aws data bag with credentials</li>
</ul>


<p>```
mkdir -p example-chef-repo/data_bags/aws
emacs example-chef-repo/data_bags/aws/backup.json</p>

<p>{
  "id": "backup",
  "aws_access_key_id": "AWS_ACCESS_KEY",
  "aws_secret_access_key": "AWS_SECRET_KEY"
}
```</p>

<ul>
<li>It's better to use AWS_ACCESS_KEY and AWS_SECRET_KEY credentials of IAM user that has access to S3 only.</li>
<li>Upload that data bag to your chef-server</li>
</ul>


<p><code>
knife data bag create aws
knife data bag from file aws backup.json
</code></p>

<ul>
<li>If you don't have chef-server, rewrite recipe to use attributes, and set AWS credentials through attributes.</li>
<li>And That's it - just add example-backup to your node run_list.</li>
</ul>


<p><code>
knife node run_list add node_name 'recipe[example-backup]'
</code></p>

<ul>
<li>And run <code>chef-client</code> on the node.</li>
</ul>


<h1>References</h1>

<h2>cookbooks</h2>

<ul>
<li><a href="https://github.com/gofullstack/backup-cookbook">backup cookbook on github</a></li>
<li><a href="https://github.com/damm/backup">backup lwrp cookbook on github</a></li>
<li><a href="https://github.com/opscode-cookbooks/cron">cron cookbook on github</a></li>
</ul>


<h2>gems</h2>

<h3>chef-rewind gem</h3>

<ul>
<li><a href="https://github.com/bryanwb/chef-rewind">chef-rewind gem on github</a></li>
</ul>


<h3>backup gem</h3>

<ul>
<li><a href="http://meskyanichi.github.io/backup/v4/">backup gem v4.x documentation</a></li>
</ul>


<h3>aws-s3 gem</h3>

<ul>
<li><a href="http://rubydoc.info/gems/aws-s3/0.6.3/frames">AWS::S3 module documentation</a></li>
<li><a href="http://rubydoc.info/gems/aws-s3/0.6.3/AWS/S3/Service">AWS::S3::Service class documentation</a></li>
<li><a href="http://rubydoc.info/gems/aws-s3/0.6.3/AWS/S3/Bucket">AWS::S3::Bucket class documentation</a></li>
</ul>


<h3>test-kitchen</h3>

<ul>
<li><a href="https://github.com/test-kitchen/test-kitchen">test-kitchen gem on github</a></li>
<li><a href="https://github.com/test-kitchen/kitchen-digitalocean">kitchen-digital ocean driver on github</a></li>
</ul>


<h3>berkshelf</h3>

<ul>
<li><a href="http://berkshelf.com/">berkshelf gem documentation</a></li>
</ul>

]]></content>
  </entry>
  
</feed>

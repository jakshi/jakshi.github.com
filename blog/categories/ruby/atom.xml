<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | DevOp's Blog]]></title>
  <link href="http://jakshi.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://jakshi.github.com/"/>
  <updated>2015-03-18T19:51:54+08:00</updated>
  <id>http://jakshi.github.com/</id>
  <author>
    <name><![CDATA[jakshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Backup gem and Chef]]></title>
    <link href="http://jakshi.github.com/blog/2014/04/24/backup-gem-and-chef/"/>
    <updated>2014-04-24T12:48:00+08:00</updated>
    <id>http://jakshi.github.com/blog/2014/04/24/backup-gem-and-chef</id>
    <content type="html"><![CDATA[<h1>Intro</h1>

<ul>
<li>There's a nice tool for doing fast and easy backup to AWS S3: <a href="http://meskyanichi.github.io/backup/">backup gem</a></li>
<li>There should be done a lot of steps for setup a backup though.</li>
<li>So it could be automated with chef.</li>
<li>In this article I'll write log of creation backup gem's cookbook.</li>
<li>Essentially this cookbook will install backup gem, that will backup /var/www folder to AWS S3 every day in 01:00. It will store last 14 backups.</li>
</ul>


<!-- more -->


<h1>Chef application cookbook for backup gem</h1>

<h2>Create a cookbook</h2>

<p>   mkdir example-backup
   cd example-backup</p>

<h2>Create metadata</h2>

<pre><code>emacs metadata.rb
</code></pre>

<p>```
name             'example-backup'
maintainer       'John Smith'
maintainer_email 'john@example.com'
license          'Apache 2.0'
description      'Installs/Configures example-backup'
long_description IO.read(File.join(File.dirname(<strong>FILE</strong>), 'README.md'))
version          '0.0.1'</p>

<p>%w{ubuntu}.each do |os|
  supports os
end</p>

<p>depends 'backup', '~> 0.4.0'
depends 'build-essential'
depends 'cron', '= 1.3.8'
```</p>

<ul>
<li>We will use 'backup' gem for setupping backup.</li>
<li>build-essential is necessary for installing gem's native extensions</li>
<li>cron is restricted to 1.3.8 version, because last version of cron (1.3.10) was broken on the moment of writing this article.</li>
<li>This example is for ubuntu 12.04 LTS only</li>
</ul>


<h2>Attributes</h2>

<pre><code>emacs attributes/default.rb
</code></pre>

<p><code>
default['example']['backup']['s3-bucket'] = 'example.com.backup'
override['build-essential']['compile_time'] = true
override['backup']['dependencies'] = [['fog'],['aws-s3']]
override['backup']['version'] = '4.0.1'
override['backup']['path'] = '/opt/backup'
</code></p>

<h2>Templates</h2>

<pre><code>emacs templates/default/config.rb.erb
</code></pre>

<p>```</p>

<h1>encoding: utf-8</h1>

<h1>#</h1>

<h1>Backup v4.x Configuration</h1>

<p>#</p>

<h1>Documentation: http://meskyanichi.github.io/backup</h1>

<h1>Issue Tracker: https://github.com/meskyanichi/backup/issues</h1>

<p>root_path '&lt;%= @root_path %>'
tmp_path '&lt;%= @tmp_path %>'
data_path '&lt;%= @data_path %>'
```</p>

<h2>Recipes</h2>

<h3>default</h3>

<pre><code>emacs recipes/default.rb
</code></pre>

<p><code>
include_recipe 'example-backup::dependencies'
include_recipe 'example-backup::backup'
</code></p>

<h3>dependencies</h3>

<p>This recipe is to install dependenices that neccessary for backup gem to functioning.</p>

<pre><code>emacs recipes/dependencies.rb
</code></pre>

<p>```
include_recipe 'build-essential'</p>

<p>%w{ruby1.9.1-full libopenssl-ruby1.9.1 libssl-dev zlib1g-dev}.each do |pkg|
  package(pkg).run_action(:install)
end</p>

<h1>Make ruby19 default ruby interpreter</h1>

<h1>Ruby 1.8.x on Ubuntu 12.04 LTS have priority 50</h1>

<h1>Let's setup priority 400 for ruby 1.9.x</h1>

<p>bash 'ruby19_by_default' do
  cwd '/tmp'
  code &lt;&lt;-EOH
  update-alternatives --install /usr/bin/ruby ruby /usr/bin/ruby1.9.1 400 --slave /usr/share/man/man1/ruby.1.gz ruby.1.gz /usr/share/man/man1/ruby1.9.1.1.gz --slave /usr/bin/erb erb /usr/bin/erb1.9.1 --slave /usr/share/man/man1/erb.1.gz erb.1.gz /usr/share/man/man1/erb1.9.1.1.gz --slave /usr/bin/irb irb /usr/bin/irb1.9.1 --slave /usr/share/man/man1/irb.1.gz irb.1.gz /usr/share/man/man1/irb1.9.1.1.gz --slave /usr/bin/rdoc rdoc /usr/bin/rdoc1.9.1 --slave /usr/share/man/man1/rdoc.1.gz rdoc.1.gz /usr/share/man/man1/rdoc1.9.1.1.gz --slave /usr/bin/ri ri /usr/bin/ri1.9.1 --slave /usr/share/man/man1/ri.1.gz ri.1.gz /usr/share/man/man1/ri1.9.1.1.gz --slave /usr/bin/testrb testrb /usr/bin/testrb1.9.1 --slave /usr/share/man/man1/testrb.1.gz testrb.1.gz /usr/share/man/man1/testrb1.9.1.1.gz
EOH
end</p>

<p>chef_gem "chef-rewind"
require 'chef/rewind'</p>

<p>include_recipe 'backup'</p>

<p>%w{keys .data logs}.each do |dir|
  directory "#{node['backup']['path']}/#{dir}" do</p>

<pre><code>action :create
recursive true
</code></pre>

<p>  end
end</p>

<p>rewind :template => "Backup config file" do
  source 'config.rb.erb'
  cookbook_name 'example-backup'
  variables({</p>

<pre><code>:root_path =&gt; node['backup']['path'],
:tmp_path =&gt; '/tmp',
:data_path =&gt; "#{node['backup']['path']}/.data"
</code></pre>

<p>  })
end
```</p>

<ul>
<li>Recipe installs ruby 1.9 and make it default.</li>
<li>I include backup::default recipe, that will install backup, fog and aws-s3 gems, create backup config and some necessary dirs.</li>
<li>Little trick. Last version of backup recipe doesn't support backup gem 4.x version.</li>
<li>Difference is in the config file template.</li>
<li>So I substitute backup's cookbook config file template (for 3.x version of backup gem) with my own config template for 4.x version of backup gem.</li>
<li>I use chef-rewind gem for that</li>
</ul>


<h3>backup</h3>

<p>Action part of recipe. It will configure backup.</p>

<pre><code>emacs recipes/backup.rb
</code></pre>

<p>```
aws = data_bag_item('aws', 'backup')</p>

<p>backup_model :www do
  description "backup of /var/www folder"
  definition &lt;<-EOS
before do
  require 'aws/s3'
  AWS::S3::Base.establish_connection!(:access_key_id => '#{aws['aws_access_key_id']}', :secret_access_key => '#{aws['aws_secret_access_key']}')
  AWS::S3::Bucket.create('#{node['example']['backup']['s3-bucket']}')
  AWS::S3::Base.disconnect!
end</p>

<p>split_into_chunks_of 50</p>

<p>store_with S3 do |s3|
  s3.access_key_id = '#{aws['aws_access_key_id']}'
  s3.secret_access_key = '#{aws['aws_secret_access_key']}'
  s3.region = 'us-east-1'
  s3.bucket = '#{node['example']['backup']['s3-bucket']}'
  s3.path = '/'
  s3.keep = 14
  s3.fog_options = {</p>

<pre><code>:path_style =&gt; true
</code></pre>

<p>  }
end</p>

<h1>#</h1>

<h1>Gzip [Compressor]</h1>

<p>#
compress_with Gzip</p>

<p>archive :www do |archive|
  archive.add '/var/www/'
  archive.tar_options '-p'
end</p>

<p>EOS
  schedule({</p>

<pre><code>:minute =&gt; '0',
:hour   =&gt; '1',
</code></pre>

<p>  })
  cron_options({</p>

<pre><code>:path =&gt; '/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin'
</code></pre>

<p>  })
end
```</p>

<ul>
<li>I get aws credentials from aws data bag.</li>
<li>They could be loaded from other source, like attributes, anything you like.</li>
<li>In backup model I create a before hook that will create amazon bucket for backups in case it doesn't exist.</li>
<li>Then backup resource just describe backupping /var/www to Amazon S3 bucket, keep 14 backup, start every day on 01:00 AM.</li>
</ul>


<h2>Usage</h2>

<ul>
<li>I presume that you use chef-server and you already have some chef repository, like <code>example-chef-repo</code>.</li>
<li>Fill aws data bag with credentials</li>
</ul>


<p>```
mkdir -p example-chef-repo/data_bags/aws
emacs example-chef-repo/data_bags/aws/backup.json</p>

<p>{
  "id": "backup",
  "aws_access_key_id": "AWS_ACCESS_KEY",
  "aws_secret_access_key": "AWS_SECRET_KEY"
}
```</p>

<ul>
<li>It's better to use AWS_ACCESS_KEY and AWS_SECRET_KEY credentials of IAM user that has access to S3 only.</li>
<li>Upload that data bag to your chef-server</li>
</ul>


<p><code>
knife data bag create aws
knife data bag from file aws backup.json
</code></p>

<ul>
<li>If you don't have chef-server, rewrite recipe to use attributes, and set AWS credentials through attributes.</li>
<li>And That's it - just add example-backup to your node run_list.</li>
</ul>


<p><code>
knife node run_list add node_name 'recipe[example-backup]'
</code></p>

<ul>
<li>And run <code>chef-client</code> on the node.</li>
</ul>


<h1>References</h1>

<h2>cookbooks</h2>

<ul>
<li><a href="https://github.com/gofullstack/backup-cookbook">backup cookbook on github</a></li>
<li><a href="https://github.com/damm/backup">backup lwrp cookbook on github</a></li>
<li><a href="https://github.com/opscode-cookbooks/cron">cron cookbook on github</a></li>
</ul>


<h2>gems</h2>

<h3>chef-rewind gem</h3>

<ul>
<li><a href="https://github.com/bryanwb/chef-rewind">chef-rewind gem on github</a></li>
</ul>


<h3>backup gem</h3>

<ul>
<li><a href="http://meskyanichi.github.io/backup/v4/">backup gem v4.x documentation</a></li>
</ul>


<h3>aws-s3 gem</h3>

<ul>
<li><a href="http://rubydoc.info/gems/aws-s3/0.6.3/frames">AWS::S3 module documentation</a></li>
<li><a href="http://rubydoc.info/gems/aws-s3/0.6.3/AWS/S3/Service">AWS::S3::Service class documentation</a></li>
<li><a href="http://rubydoc.info/gems/aws-s3/0.6.3/AWS/S3/Bucket">AWS::S3::Bucket class documentation</a></li>
</ul>


<h3>test-kitchen</h3>

<ul>
<li><a href="https://github.com/test-kitchen/test-kitchen">test-kitchen gem on github</a></li>
<li><a href="https://github.com/test-kitchen/kitchen-digitalocean">kitchen-digital ocean driver on github</a></li>
</ul>


<h3>berkshelf</h3>

<ul>
<li><a href="http://berkshelf.com/">berkshelf gem documentation</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Manage AWS Elastic IPs with AWS Ruby SDK]]></title>
    <link href="http://jakshi.github.com/blog/2013/06/07/manage-aws-elastic-ips-with-aws-ruby-sdk/"/>
    <updated>2013-06-07T13:48:00+08:00</updated>
    <id>http://jakshi.github.com/blog/2013/06/07/manage-aws-elastic-ips-with-aws-ruby-sdk</id>
    <content type="html"><![CDATA[<p>I tried three ruby libs for managing Elastic IPs for AWS EC2.</p>

<ul>
<li>fog</li>
<li>right_aws</li>
<li>Official Ruby AWS SDK.</li>
</ul>


<p>I wholeheartedly recommend Official AWS Ruby SDK, as most simple and easy to use.
I also insert several examples of assigning Elastic IPs with AWS Ruby SDK:</p>

<!-- more -->


<h1>Connect to AWS API with AWS Ruby SDK.</h1>

<pre><code>c = AWS::EC2.new(:access_key_id =&gt; "AWS_access_key", :secret_access_key =&gt; "AWS_secret_key", :region =&gt; "us-east-1")
</code></pre>

<h1>Associate Elastic IP</h1>

<p><strong>x.x.x.x</strong> in this example is your Elastic IP address</p>

<pre><code>eip = c.elastic_ips["x.x.x.x"]
eip.associate :instance =&gt; "Your instance id"
</code></pre>

<h1>Disassociate Elastic IP</h1>

<p><strong>x.x.x.x</strong> in this example is your Elastic IP address</p>

<pre><code>eip = c.elastic_ips["x.x.x.x"]
eip.disassociate
</code></pre>

<h1>Further reading</h1>

<ul>
<li><a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AESDG-chapter-instancedata.html">AWS Documentation: Instance Metadata and User Data</a></li>
<li><a href="https://github.com/madebymade/aws-remap-elastic-ip">AWS Elastic IP remapper</a></li>
</ul>


<h2>AWS Ruby SDK</h2>

<ul>
<li><a href="https://github.com/aws/aws-sdk-ruby/tree/master/samples">GitHub: AWS Ruby SDK Examples</a></li>
<li><a href="http://docs.aws.amazon.com/AWSSdkDocsRuby/latest%0A/DeveloperGuide/ruby-dg-setup.html">AWS Docs: AWS Ruby SDK Getting Started</a></li>
<li><a href="http://docs.aws.amazon.com/AWSRubySDK/latest/frames.html">AWS Docs: AWS Ruby SDK</a></li>
<li><a href="http://docs.aws.amazon.com/AWSRubySDK/latest/AWS/EC2/ElasticIpCollection.html">AWS Docs: AWS Ruby SDK Class: AWS::EC2::ElasticIpCollection</a></li>
<li><a href="http://docs.aws.amazon.com/AWSRubySDK/latest/AWS/EC2/ElasticIp.html">AWS Docs: AWS Ruby SDK Class: AWS::EC2::ElasticIp</a></li>
<li><a href="http://docs.aws.amazon.com/AWSRubySDK/latest/AWS/Core/Configuration.html#initialize-instance_method">AWS Docs: AWS Ruby SDK Class: AWS::Core::Configuration.initialize</a></li>
<li><a href="http://docs.aws.amazon.com/AWSRubySDK/latest/AWS/EC2.html">AWS Docs: AWS Ruby SDK Class: AWS::EC2</a></li>
<li><a href="http://rubygems.org/gems/aws-sdk">RubyGems: AWS Ruby SDK</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Manage AWS Elastic IPs with fog]]></title>
    <link href="http://jakshi.github.com/blog/2013/06/03/manage-aws-elastic-ips-with-fog/"/>
    <updated>2013-06-03T19:25:00+08:00</updated>
    <id>http://jakshi.github.com/blog/2013/06/03/manage-aws-elastic-ips-with-fog</id>
    <content type="html"><![CDATA[<h1>Connect to AWS API with fog.</h1>

<pre><code>require 'fog'

c = Fog::Compute.new(
                 :provider =&gt; 'AWS',
                 :aws_access_key_id =&gt; 'Your AWS access key',
                 :aws_secret_access_key =&gt; 'Your AWS secret key',
                 :region =&gt; 'us-east-1' )
</code></pre>

<!-- more -->


<h1>Associate Elastic IP</h1>

<pre><code>eip = c.addresses.get('Your elastic IP address')
c.associate_address("Your instance id",nil,nil,eip.allocation_id)
</code></pre>

<h1>Disassociate Elastic IP</h1>

<pre><code>eip = c.describe_addresses('public-ip' =&gt; ['Your elastic IP address'])
disassociate_address(nil,eip[:body]["addressesSet"][0]["associationId"])
</code></pre>

<h1>Association Elastic IP script example.</h1>

<p><strong>assign_eip.rb</strong>:</p>

<pre><code>#!/usr/bin/ruby
# This is a script that assign Elastic IP to current instance.
# Usage:
# You need to fill out config_eip.json config file:
# {
# "aws_access_key": "aws_access_key",
# "aws_secret_key": "aws_secret_key",
# "eip": "x.x.x.x",
# }
#
# Config file should be in the same dir as a script
# then, start script:
# assign_eip.rb
# This will assign x.x.x.x Elastic IP to current instance.

require "rubygems"
require "json"
require "net/http"
require "fog"

# Read config
CONFIG = JSON.parse(IO.read(File.join(File.dirname(__FILE__), 'assign_eip.json')))

# Here we need to get server.id
INSTANCE_HOST = '169.254.169.254'
INSTANCE_ID_URL = '/latest/meta-data/instance-id'
INSTANCE_REGION_URL = '/latest/meta-data/placement/availability-zone'

httpcall = Net::HTTP.new(INSTANCE_HOST)
resp, instance_id = httpcall.get2(INSTANCE_ID_URL)
resp, region = httpcall.get2(INSTANCE_REGION_URL)

# Cut out availability zone marker.
# For example if region == "us-east-1c" after cutting out it will be
# "us-east-1"

region = region[0..-2]

# First we get a connection object from amazon, region is
# required if your instances are in other zone than the
# gem's default one (us-east-1).

c = Fog::Compute.new(
                 :provider =&gt; 'AWS',
                 :aws_access_key_id =&gt; CONFIG['aws_access_key'],
                 :aws_secret_access_key =&gt; CONFIG['aws_secret_key'],
                 :region =&gt; region )

# Then we get Fog::Compute::AWS::Address to get allocation_id of Elastic IP.
# For some reason I failed to make it work with IP address directly.
# if I use Elastic IP instead of allocation id it always returns 400
# Bad Request.

eip = c.addresses.get(CONFIG['eip'])

# Then we accociate Elastic IP with current node.

c.associate_address(instance_id,nil,nil,eip.allocation_id)
</code></pre>

<p><strong>assign_eip.json</strong>:</p>

<pre><code>{
"aws_access_key": "AWS_access_key",
"aws_secret_key": "Your_AWS_secret_key",
"eip": "Elastic IP to assign"
}
</code></pre>

<h1>Further reading</h1>

<ul>
<li><a href="http://rubydoc.info/gems/fog/frames">RubyDoc: fog</a></li>
<li><a href="http://rubydoc.info/github/fog/fog/Fog/Compute/AWS">RubyDoc: Fog::Compute::AWS</a></li>
<li><a href="http://rubydoc.info/github/stesla/fog/Fog/AWS/EC2#associate_address-instance_method">RubyDoc: Fog::AWS::EC2.associate_address</a></li>
<li><a href="http://rubydoc.info/github/fog/fog/Fog/Compute/AWS/Addresses">RubyDoc: Fog::Compute::AWS::Addresses</a></li>
<li><a href="http://rubydoc.info/github/fog/fog/index">RubyDoc: Fog Alphabetic Index</a></li>
<li><a href="https://github.com/fog/fog/blob/master/lib/fog/aws/requests/compute/associate_address.rb">GitHub: fog - associate_address.rb</a></li>
<li><a href="http://opsrobot.com/post/9631423001/using-fog-for-attaching-aws-elastic-ip-addresses-to">Using fog for attaching AWS elastic ip addresses to servers</a></li>
<li><a href="http://fog.io/">Fog home site</a></li>
<li><a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AESDG-chapter-instancedata.html">AWS Documentation: Instance Metadata and User Data</a></li>
<li><a href="https://github.com/madebymade/aws-remap-elastic-ip">AWS Elastic IP remapper</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
